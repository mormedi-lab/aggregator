steps:
  # [START set-tf-config]
  - id: 'set tf config'
    name: 'alpine'
    entrypoint: 'sh'
    args: [ 'set_tf_config.sh' ]
    env:
      - 'PROJECT_ID=${PROJECT_ID}'
      - 'REGION=${LOCATION}'
      - 'BRANCH_NAME=${BRANCH_NAME}'
      - 'CLOUD_RUN_IMAGE_NAME=${_CLOUD_RUN_IMAGE_NAME}'
  # [END set-tf-config]

  # [START tf-init]
  - id: 'tf init'
    name: 'hashicorp/terraform:1.11.4'
    args: ['init']
  # [END tf-init]

  # [START tf-plan]
  - id: 'tf plan'
    name: 'hashicorp/terraform:1.11.4'
    args: ['plan']
  # [END tf-plan]

  # [START docker-build]
  # Uses the standard Docker builder provided by Google Cloud Build
  - id: 'docker build'
    name: 'gcr.io/cloud-builders/docker'
    args: [ 'build', '-t', '${_CLOUD_RUN_IMAGE_NAME}', 'apis/' ]
  # [END docker-build]

  # [START docker-push]
  # Push the built image to Google Container Registry (GCR)
  - id: 'docker push'
    name: 'gcr.io/cloud-builders/docker'
    args: [ 'push', '${_CLOUD_RUN_IMAGE_NAME}' ]
  # [END docker-push]

  # [START tf-apply]
  - id: 'tf apply'
    name: 'hashicorp/terraform:1.11.4'
    args: ['apply', '-auto-approve']
  # [END tf-apply]

  ############ Frontend ############
  # [START node install]
  # Install the frontend dependencies
  - id: 'node install'
    name: 'node:${_NODE_VERSION}'
    entrypoint: 'npm'
    dir: 'frontend'
    args: [ 'install' ]
  # [END node install]

  # [START node build]
  # Build the frontend
  - id: 'node build'
    name: 'node:${_NODE_VERSION}'
    entrypoint: 'npm'
    dir: 'frontend'
    args: [ 'run', 'build' ]
  # [END node build]

  # [START firebase deploy]
  # Deploy to Firebase Hosting
  - id: 'firebase deploy'
    name: gcr.io/$PROJECT_ID/firebase
    args: [ 'deploy', '--project=$PROJECT_ID', '--only=hosting' ]
#    entrypoint: 'sh'
#    args:
#      - '-c'
#      - |
#        if [ $(cat sanitized_branch_name.txt) = "prod" ]; then
#          firebase deploy \
#            --project=${PROJECT_ID} \
#            --only=hosting \
#            --message="Deploying branch ${BRANCH_NAME} commit ${COMMIT_SHA} to Firebase Hosting"
#        else
#          firebase hosting:channel:deploy tmp-channel \
#            --project=${PROJECT_ID}
#        fi
  # [END firebase deploy]

# Substitutions variables
substitutions:
  _NODE_VERSION: '22'
  # Tags the image with the unique commit SHA for easy tracking
  _CLOUD_RUN_IMAGE_NAME: 'gcr.io/${PROJECT_ID}/apis:${COMMIT_SHA}'

# Configure Cloud Build options
options:
  # Send build logs straight to Cloud Logging
  logging: CLOUD_LOGGING_ONLY
  dynamicSubstitutions: true