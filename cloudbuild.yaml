steps:
  ############ Frontend ############
  # Step Front.1: Install the frontend dependencies
  - name: 'node:${_NODE_VERSION}'
    entrypoint: 'npm'
    dir: 'frontend'
    args: ['install']

  # Step Front.2: Build the frontend
  - name: 'node:${_NODE_VERSION}'
    entrypoint: 'npm'
    dir: 'frontend'
    args: [ 'run', 'build' ]

  # Step Front.3: Deploy to Firebase Hosting
  - name: gcr.io/$PROJECT_ID/firebase
    args: [ 'deploy', '--project=$PROJECT_ID', '--only=hosting' ]

  ############ APIS ############
  # Step Apis.1: Build the Docker image
  # Uses the standard Docker builder provided by Google Cloud Build
  # Tags the image with the unique commit SHA for easy tracking
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/apis:$COMMIT_SHA', 'apis/']

  # Step Apis.2: Push the built image to Google Container Registry (GCR)
  # GCR is Google's private Docker image storage
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/apis:$COMMIT_SHA']

  # Step Apis.3: Deploy the image to Cloud Run
  # Uses the gcloud command-line tool (also provided as a builder)
  # Deploys a service named "apis" using the image we just pushed
  # Sets an environment variable (e.g., ENV=LIVE)
  # Specifies the region and project
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'apis' # This should be your service name
      - '--image=gcr.io/$PROJECT_ID/apis:$COMMIT_SHA' # Use the image we built/pushed
      - '--set-env-vars=ENV=LIVE' # Example environment variable
      - '--region=europe-southwest1' # TODO: move region to env
      - '--project=$PROJECT_ID'
      # Add other flags as needed: --memory, --cpu, --allow-unauthenticated, etc.

  # Step Apis.4: Make sure 100% of traffic goes to the new version
  # This ensures the update is live immediately
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'services'
      - 'update-traffic'
      - 'apis' # Your service name again
      - '--to-latest'
      - '--region=europe-southwest1' # Same region as deployment
      - '--project=$PROJECT_ID'

substitutions:
    _NODE_VERSION: '22'

# Configure Cloud Build options
options:
  # Send build logs straight to Cloud Logging
  logging: CLOUD_LOGGING_ONLY