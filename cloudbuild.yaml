steps:
  # [START set-tf-config]
  - id: 'set tf config'
    name: 'alpine'
    entrypoint: 'sh'
    args: [ 'set_tf_config.sh' ]
    env:
      - 'PROJECT_ID=${PROJECT_ID}'
      - 'LOCATION=${LOCATION}'
      - 'BRANCH_NAME=${BRANCH_NAME}'
      - 'COMMIT_SHA=${COMMIT_SHA}'
  # [END set-tf-config]

  # [START tf-init]
  - id: 'tf init'
    name: '${_TERRAFORM_IMAGE}'
    args: [ 'init' ]
  # [END tf-init]

  # [START tf-plan]
  - id: 'tf plan'
    name: '${_TERRAFORM_IMAGE}'
    args: [ 'plan' ]
  # [END tf-plan]

  # [START docker build push]
  # Build the Docker image and push it to Google Container Registry (GCR).
  - id: 'docker build push'
    name: '${_DOCKER_IMAGE}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        docker build -t $(cat apis_image_name.txt) apis/
        docker push $(cat apis_image_name.txt)
  # [END docker build push]

  # [START tf-apply]
  - id: 'tf apply'
    name: '${_TERRAFORM_IMAGE}'
    args: [ 'apply', '-auto-approve' ]
  # [END tf-apply]

  ############ Frontend ############
  # [START create frontend .env]
  # Install the frontend dependencies
  - id: 'Create frontend .env'
    name: '${_TERRAFORM_IMAGE}'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "# Env vars generated by the CI" > frontend/.env
        echo "VITE_API_URL=$(terraform output -raw service_url)" >> frontend/.env
        echo "************ frontend/.env ************"
        cat frontend/.env
        echo "***************************************"
  # [END create frontend .env]

  # [START node install]
  # Install the frontend dependencies
  - id: 'node install'
    name: '${_NODE_IMAGE}'
    entrypoint: 'npm'
    dir: 'frontend'
    args: [ 'install' ]
  # [END node install]

  # [START node build]
  # Build the frontend
  - id: 'node build'
    name: '${_NODE_IMAGE}'
    entrypoint: 'npm'
    dir: 'frontend'
    args: [ 'run', 'build' ]
  # [END node build]

  # [START firebase deploy]
  # Deploy to Firebase Hosting.
  # For the prod branch deploy to the default hosting URL
  # For other branches deploy to a preview channel named from the sanitized branch name, stored in the file sanitized_branch_name.txt.
  - id: 'firebase deploy'
    #    name: gcr.io/$PROJECT_ID/firebase
    name: us-docker.pkg.dev/firebase-cli/us/firebase
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ ${BRANCH_NAME} = "prod" ]; then
          firebase deploy \
            --project=${PROJECT_ID} \
            --only=hosting \
            --message="Deploying branch ${BRANCH_NAME} commit ${COMMIT_SHA} to Firebase Hosting"
        else
          firebase hosting:channel:deploy $(cat sanitized_branch_name.txt) \
            --project=${PROJECT_ID}
        fi
  # [END firebase deploy]

# Substitutions variables
substitutions:
  _TERRAFORM_IMAGE: 'hashicorp/terraform:1.11.4'
  _DOCKER_IMAGE: 'gcr.io/cloud-builders/docker'
  _NODE_IMAGE: 'node:22'

# Configure Cloud Build options
options:
  # Send build logs straight to Cloud Logging
  logging: CLOUD_LOGGING_ONLY
  dynamicSubstitutions: true